plugins {
  id 'org.springframework.boot' version '2.4.2' apply true
  id "io.spring.dependency-management" version "1.0.11.RELEASE"
  id 'java'
  id 'idea'
  id 'com.gorylenko.gradle-git-properties' version '2.2.4'
  id 'com.palantir.docker' version '0.25.0'
  id 'com.palantir.docker-run' version '0.25.0'

  id 'com.avast.gradle.docker-compose' version '0.14.0'
  id 'com.google.cloud.tools.jib' version '2.7.1'
  id 'org.unbroken-dome.helm' version '1.4.0'
  id 'org.unbroken-dome.helm-publish' version '1.4.0'
  id 'org.unbroken-dome.helm-releases' version '1.4.0'

  id 'se.patrikerdes.use-latest-versions' version '0.2.15'
  id 'com.github.ben-manes.versions' version '0.36.0'

  id 'maven-publish'
}

ext {
  set('activeSpringProfiles', 'local')
  set('tag', 'local')
  set('chartRepoUrl', 'http://chartmuseum.default.svc.cluster.local/')
}

group = 'com.gregturnquist.learningspringboot'

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
  implementation enforcedPlatform('org.springframework.cloud:spring-cloud-dependencies:2020.0.1')
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.cloud:spring-cloud-config-server'
}

sourceCompatibility = 11
targetCompatibility = 11

springBoot {
    buildInfo {
        properties {
            artifact = "${rootProject.name}"
            group = "${project.group}"
            name = "${rootProject.name}"
            version = "${project.version}"
        }
    }
}

bootJar {
  baseName = 'lsb2-config-server'
  layered()
  excludeDevtools = false
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.gregturnquist.learningspringboot'
            from components.java
        }
    }
}

tasks.jib.dependsOn tasks.check
jib {
    from {
        image = 'gcr.io/distroless/java-debian10'
    }
    to {
      image = 'jghamburg/lsb2-config-server'
      tags = ["latest", project.version]
      credHelper = 'osxkeychain'
    }
    extraDirectories {
        paths = file('./ssl')
    }
    container {
      jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Xms256m', '-Xdebug']
      mainClass = 'com.greglturnquist.learningspringboot.LearningSpringBootConfigServer'
      args = []
      ports = ['8888']
    }
}
helm {
    // The global lint configuration applies to all charts
    lint {
        // treat linter warnings as errors (failing the build)
        strict = true
    }

    publishing {
        repositories {
            chartMuseum('localcharts') {
                url = uri('http://chartmuseum-chartmuseum.default.svc.cluster.local:8080')
            }
        }
    }

    filtering {
        values.put 'imageRepository', jib.to.image
        values.put 'imageTag', jib.to.tags.first()
        values.put 'appVersion', "${project.version}"
    }

    charts {
        main {
          chartVersion = "${project.version}"
          sourceDir = file('src/main/helm')
        }
    }

    releases {

        configserver {
            valuesDir 'src/main/helm'
            forTarget('local') {
                from chart('main')
                installDependsOn 'jibDockerBuild'
                values.put 'imageTag', 'latest'
                values.put 'appVersion', "${project.version}"
            }
            forTarget('nonlive') {
                from chart('main')
                installDependsOn 'jib'
            }
        }
    }
    releaseTargets {
        local {
//            kubeContext = 'docker-for-desktop'
        }
        nonlive {
//            kubeContext = 'aws'
//            atomic = true
        }
    }

}
/*
 * docker-compose plugin configuration.
 * Details on https://github.com/avast/gradle-docker-compose-plugin
 */
dockerCompose {
  useComposeFiles = ['docker/env/local.yml'] // like 'docker-compose -f <file>'; default is empty
  buildBeforeUp = true // performs 'docker-compose build' before calling the 'up' command; default is true

  waitForTcpPorts = true // turns off the waiting for exposed TCP ports opening
  captureContainersOutput = true // if true, prints output of all containers to Gradle output - very useful for debugging; default is false

  stopContainers = true // doesn't call `docker-compose down` - see below the paragraph about reconnecting
  removeContainers = true
  removeOrphans = false // removes containers for services not defined in the Compose file

  environment.put 'TAG', version
}
composeBuild.dependsOn bootJar
composeUp.dependsOn composeBuild
composePush.dependsOn composeBuild

dockerRun{
    name 'semantic-release'
    image 'jghamburg/git-semantic-release'
    volumes "${projectDir}": '/app'
    ports '7080:5000'
    daemonize false
    clean true
    command 'semantic-release', '-b', 'master', '--no-ci'
    env 'GH_TOKEN': "${System.env.GH_TOKEN}", 'GIT_CREDENTIALS': "${System.env.GIT_CREDENTIALS}"
}
